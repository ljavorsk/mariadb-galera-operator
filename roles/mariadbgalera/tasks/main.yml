---
# tasks file for MariadbGalera

- name: Create Service for all MariadbGalera Pods
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: '{{ ansible_operator_meta.name }}-service'
        namespace: '{{ ansible_operator_meta.namespace }}'
        labels:
          app: mariadbgalerainit
      spec:
        selector:
          app: mariadbgalerainit
        ports:
        - name: mariadb-database
          protocol: TCP
          port: 3306
        - name: 4444-tcp
          port: 4444
          protocol: TCP
          targetPort: 4444
        - name: 4567-tcp
          port: 4567
          protocol: TCP
          targetPort: 4567
        - name: 4568-tcp
          port: 4568
          protocol: TCP
          targetPort: 4568


- name: Create MariadbGalera Init Pod
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Pod
      metadata:
        name: '{{ ansible_operator_meta.name }}-init'
        namespace: '{{ ansible_operator_meta.namespace }}'
        labels:
          app: mariadbgalerainit
      spec:
        containers:
        - env:
          - name: GALERA_INIT
          - name: MYSQL_DATABASE
            value: db
          - name: MYSQL_PASSWORD
            value: pass
          - name: MYSQL_USER
            value: user
          name: mariadbgalera-init
          image: "quay.io/ljavorsk/mariadb-galera-init"
          ports:
          - containerPort: 3306
            protocol: TCP
          - containerPort: 4444
            protocol: TCP
          - containerPort: 4567
            protocol: TCP
          - containerPort: 4568
            protocol: TCP
    wait: yes
    wait_timeout: 3000
    wait_condition:
      type: Ready
      status: "True"


- name: Get info on the service
  kubernetes.core.k8s_info:
    kind: Service
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ ansible_operator_meta.name }}-service' 
  register: servicereg

- debug:
    var: servicereg.resources[0].spec.clusterIP

- name: Create MariadbGalera Deployment for connecting nodes
  kubernetes.core.k8s:
    definition:
      kind: Deployment
      apiVersion: apps/v1
      metadata:
        name: node
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        replicas: "{{size}}"
        selector:
          matchLabels:
            app: mariadbgalera
        template:
          metadata:
            labels:
              app: mariadbgalera
          spec:
            containers:
            - env:
              - name: CLUSTERS_IP4
                value: '{{ servicereg.resources[0].spec.clusterIP }}'
              - name: MYSQL_DATABASE
                value: db
              - name: MYSQL_PASSWORD
                value: pass
              - name: MYSQL_USER
                value: user
              name: mariadbgalera-node
              image: "quay.io/ljavorsk/mariadb-galera-init"
              ports:
              - containerPort: 3306
                protocol: TCP
              - containerPort: 4444
                protocol: TCP
              - containerPort: 4567
                protocol: TCP
              - containerPort: 4568
                protocol: TCP
              readynessProbe:
                initialDelaySeconds: 5
                periodSeconds: 5
                exec:
                  command:
                    - ls
                    - /var/lib/mysql/mysql.sock

##### Idea behind Main Pod fail-over strategy #####
#- name: Store info from Init MariaDB Pod
#  kubernetes.core.k8s_info:
#    kind: Pod
#    name: '{{ ansible_operator_meta.name }}-init'
#    namespace: '{{ ansible_operator_meta.namespace }}'
#    label_selectors:
#      - app = mariadbgalera
#  register: initpodregister


#- name: Store info from all MariaDB Pods
#  kubernetes.core.k8s_info:
#    kind: Pod
#    namespace: '{{ ansible_operator_meta.namespace }}'
#    label_selectors:
#      - app = mariadbgalera
#  register: nodesregister

#- name: Retrieve Configmap
#  kubernetes.core.k8s_info:
#    kind: ConfigMap
#    name: '{{ ansible_operator_meta.name }}-configmap'
#    namespace: '{{ ansible_operator_meta.namespace }}'
#  register: configmap

#- name: Create ConfigMap for the init Pod
#  kubernetes.core.k8s:
#    definition:
#      apiVersion: v1
#      kind: ConfigMap
#      metadata:
#        name: '{{ ansible_operator_meta.name }}-configmap'
#        namespace: '{{ ansible_operator_meta.namespace }}'
#      data:
#        name: GALERA_INIT
#        value:
#  when: configmap.resources|length == 0

#- debug:
#    var: configmap

#- name: Update ConfigMap for the init Pod after the cluster is already running
#  kubernetes.core.k8s:
#    definition:
#      apiVersion: v1
#      kind: ConfigMap
#      metadata:
#        name: '{{ ansible_operator_meta.name }}-configmap'
#        namespace: '{{ ansible_operator_meta.namespace }}'
#      data:
#        name: CLUSTERS_IP4
#        value: '{{ servicereg.resources[0].status.podIP }}'
#  when: initpodregister.resources|length > 0 and (nodesregister.resources|length) > 2 and configmap.resources|length > 0

#- name: Retrieve Configmap
#  kubernetes.core.k8s_info:
#    kind: ConfigMap
#    name: '{{ ansible_operator_meta.name }}-configmap'
#    namespace: '{{ ansible_operator_meta.namespace }}'
#  register: configmap

#- debug:
#    var: configmap
#############################################################

- name: Create Galera Arbitrator Deployment
  kubernetes.core.k8s:
    definition:
      kind: Deployment
      apiVersion: apps/v1
      metadata:
        name: '{{ ansible_operator_meta.name }}-garbd'
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        replicas: "{{garbdsize}}"
        selector:
          matchLabels:
            app: garbd
        template:
          metadata:
            labels:
              app: garbd
          spec:
            containers:
            - env:
              - name: CLUSTERS_IP4
                value: '{{ servicereg.resources[0].spec.clusterIP }}'
              name: garbd-node
              image: "quay.io/ljavorsk/garbd"
              ports:
              - containerPort: 3306
                protocol: TCP
              - containerPort: 4444
                protocol: TCP
              - containerPort: 4567
                protocol: TCP
              - containerPort: 4568
                protocol: TCP

